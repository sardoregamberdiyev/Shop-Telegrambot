
import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = '–ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏'
admin_message = '123'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row(user_message)

    await message.answer('''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ—Å–µ—Ç–∏–ª–∏ –±–æ—Ç–∞ üòÄ. \n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sos. \n\n–ù–∞–∂–º–∏—Ç–µ [–ù–∞—á–∞—Ç –ø–æ–∫—É–ø–∫–∏] üëáüèª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫–∏.
    ''', reply_markup=markup)


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):

    cid = message.chat.id
    if cid in config.ADMINS:
        config.ADMINS.remove(cid)

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ—Å–µ—â–µ–Ω–∏–µ –±–æ—Ç–∞. \n\nüõçÔ∏è /menu –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –Ω–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å'
                         '–ø–æ–∫—É–ø–∫–∏.\n\n‚ùì /sos –µ—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã, –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å.', reply_markup=ReplyKeyboardRemove())


@dp.message_handler(text=admin_message)
async def admin_mode(message: types.Message):

    cid = message.chat.id
    if cid not in config.ADMINS:
        config.ADMINS.append(cid)

    await message.answer('Admin rejimi yoqildi üë®üèª‚Äçüíª', reply_markup=ReplyKeyboardRemove())


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':

    if "HEROKU" in list(os.environ.keys()):

        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )

    else:

        executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
